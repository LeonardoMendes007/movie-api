// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieApp.Infra.Data.Persistence;

#nullable disable

namespace MovieApp.Infra.Data.Migrations
{
    [DbContext(typeof(MovieAppDbContext))]
    [Migration("20240323222643_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieApp.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tb_genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef328301-3f88-4c38-895c-955fdc6c0d85"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("bec2a112-69ce-4811-b346-27bdc742dd63"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("6cfad5a0-47dc-431d-8a31-6b5e2eae8f8a"),
                            Name = "Cinema de arte"
                        },
                        new
                        {
                            Id = new Guid("5122d77e-6838-426a-8296-f6d4b58567e7"),
                            Name = "Chanchada"
                        },
                        new
                        {
                            Id = new Guid("c1a7dc12-edb9-47d1-8cbd-b84337f8c25d"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("22c86897-6f3d-46b2-877f-49173dddd1c1"),
                            Name = "Comédia de ação"
                        },
                        new
                        {
                            Id = new Guid("482d67d9-7ff9-4d0d-beb2-0dfe411a825d"),
                            Name = "Comédia de terror"
                        },
                        new
                        {
                            Id = new Guid("f8a5ea89-9c47-4ed7-b9dc-2944e84ea0a1"),
                            Name = "Comédia dramática"
                        },
                        new
                        {
                            Id = new Guid("096fef1e-046a-40e4-901b-ab5df10dc52d"),
                            Name = "Comédia romântica"
                        },
                        new
                        {
                            Id = new Guid("593e4d44-fa19-440f-b817-d27073161066"),
                            Name = "Dança"
                        },
                        new
                        {
                            Id = new Guid("b8dee7ca-0f3a-4e3c-a547-3b73e7546a8e"),
                            Name = "Documentário"
                        },
                        new
                        {
                            Id = new Guid("b59b8886-f2ff-4ba6-9a5a-fa9194f672bc"),
                            Name = "Docuficção"
                        },
                        new
                        {
                            Id = new Guid("39851f71-7ef8-47ea-ad50-d47a00106e9b"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("63f6754b-5d74-4927-a19c-d8c127fd3e5b"),
                            Name = "Espionagem"
                        },
                        new
                        {
                            Id = new Guid("ad25b3fd-2aeb-4bee-b892-116b8737f16d"),
                            Name = "Faroeste"
                        },
                        new
                        {
                            Id = new Guid("a19b4d55-facd-4f70-9528-80c340121652"),
                            Name = "Fantasia"
                        },
                        new
                        {
                            Id = new Guid("a39b92db-d3ab-4aac-a573-12c055462886"),
                            Name = "Fantasia científica"
                        },
                        new
                        {
                            Id = new Guid("812c80b1-bfec-487f-ad92-3071ba741d72"),
                            Name = "Ficção científica"
                        },
                        new
                        {
                            Id = new Guid("a5f4ea06-7186-427c-918d-86484fa9b1f8"),
                            Name = "Filmes com truques"
                        },
                        new
                        {
                            Id = new Guid("333367b7-c969-4150-92cf-d7ee2407e3f2"),
                            Name = "Guerra"
                        },
                        new
                        {
                            Id = new Guid("510a637c-51a3-4577-82f3-4f16c231a85b"),
                            Name = "Mistério"
                        },
                        new
                        {
                            Id = new Guid("b9b2a60f-7a49-406e-b915-33572ffe826d"),
                            Name = "Musical"
                        },
                        new
                        {
                            Id = new Guid("558b4e2e-925a-454c-bb02-8d29bdabf756"),
                            Name = "Policial"
                        },
                        new
                        {
                            Id = new Guid("9b24adc8-3041-4f22-bb5b-1ea23d53435c"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("898fadcb-7921-488a-9522-0e38b1495cb6"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("84c9eb1a-0374-491f-8f7f-fee2587ae01a"),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_create");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_release");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("synopsis");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_update");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("views");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ReleaseDate")
                        .IsUnique();

                    b.ToTable("tb_movie", (string)null);
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_create");

                    b.Property<int>("Score")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_update");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("tb_rating", (string)null);
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_user", (string)null);
                });

            modelBuilder.Entity("tb_favorites_movies", b =>
                {
                    b.Property<Guid>("FavoritesMoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FavoritesUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoritesMoviesId", "FavoritesUsersId");

                    b.HasIndex("FavoritesUsersId");

                    b.ToTable("tb_favorites_movies");
                });

            modelBuilder.Entity("tb_genre_movie", b =>
                {
                    b.Property<Guid>("GenriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("tb_genre_movie");
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.Rating", b =>
                {
                    b.HasOne("MovieApp.Domain.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Domain.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tb_favorites_movies", b =>
                {
                    b.HasOne("MovieApp.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoritesMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FavoritesUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tb_genre_movie", b =>
                {
                    b.HasOne("MovieApp.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MovieApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
